function [out1,out2,out3,out4]=myellip_z2(freq,order,ripple,stopDB,zQ)%MYELLIP_Z2 creates a derated low-pass elliptic filter with useful input parameters% sys=myellip_z(freq,order,ripple,stopDB,zQ)%   except the zeros are lower Q%   returns the transfer function for an elliptical filter%   with unity gain, knee at 'freq', with 'order' poles%   ripple DBs of ripple in the passband, and a%   stopband which is stopDB DBs down. %   Brian Lantz, see also myhpellip%% the zeros are computed as% Zfreq*[1 + zQ*i, 1 - zQ*i]/sqrt(1+zQ^2)% if called with two output args, returns numerator and denominator of tf, as% [num,den]=myellip(freq,order,ripple,stopDB,zQ)% zQ=10 works pretty well%% modified BTL Jan 5,2000 to return a system, not a numerator/ denominator%% modified JSK 2013 to return zeros, poles, and gains if requested.%% SVN $Id: myellip_z2.m 7958 2014-02-26 01:19:01Z jeffrey.kissel@LIGO.ORG $% if ( (order<2) | (order>3) )% 	sprintf('ellip_z only works for order 2 and 3')% 	if nargout==1% 		out1=myellip(freq,order,ripple,stopDB);% 	else% 		[out1,out2]=myellip(freq,order,ripple,stopDB);% 	end% 	return% else[ellZ, ellP, K]=ellip(order,ripple,stopDB,1,'s');Zsc_all=sort(-abs(2*pi*freq*ellZ));    % freq of the zeroZsc = Zsc_all([1:2:length(Zsc_all)]);	% pull out the odd numbered list elements (since zeros come in pairs)ellZsc=flatten(Zsc*[1 + zQ*i, 1 - zQ*i]/sqrt(1+zQ^2)).';  % make conjugate pairs at each zero freq.ellPsc=2*pi*freq*ellP;diff=length(ellP)-length(ellZ);gain=(2*pi*freq)^diff;switch nargout    case 1	out1=zpk(ellZsc,ellPsc, K*gain);    case 2	[out1,out2]=zp2tf(ellZsc,ellPsc, K*gain);    case 4        out1 = zpk(ellZsc,ellPsc, K*gain);        out2 = transpose(ellZsc) / (-2*pi); % [Hz]        out3 = transpose(ellPsc) / (-2*pi); % [Hz]        out4 = K*gain;    otherwise        disp('output can either be')        disp('nargout == 1: out = cont. zpk object of filter')        disp('nargout == 2: out1 = NUM, out2 = DEN (i.e. output of zp2tf)')        disp('nargout == 4: out1 = cont. zpk object of filter, out2 = zeros [Hz], out3 = poles [Hz], out4 = gain')end